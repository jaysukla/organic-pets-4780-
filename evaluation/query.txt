//1.Create an index on the user_id field in the purchases collection to improve the performance of your queries.
-------db.purchases.createIndex({user_id:1})

//2.Use the $lookup operator in an aggregation pipeline to join the users and purchases collections, and return a new documents that contains the name and age of each user, along with their purchases.
--------db.users.aggregate([{$lookup:{from:"purchases",localField:"_id",foreignField:"user_id",as:"purchases"}}])

//3.Use the $group operator in an aggregation pipeline to calculate the total number of purchases and total spending for each user.
------- db.users.aggregate([{$lookup:{from:"purchases",localField:"_id",foreignField:"user_id",as:"purchases"}},{$addFields:{total_purchases:{$size:"$purchases"}}},{$addFields:{total_spending:{$sum:"$purchases.price"}}},{$project:{"purchases":0}}])

//4.Use the $sort operator to sort the output documents by total spending in descending order
----------db.users.aggregate([{$lookup:{from:"purchases",localField:"_id",foreignField:"user_id",as:"purchases"}},{$addFields:{total_purchases:{$size:"$purchases"}}},{$addFields:{total_spending:{$sum:"$purchases.price"}}},{$project:{"purchases":0}}]).sort({"total_spending":-1})

//5.added purchases
-----{
    "_id": 7,
    "user_id": 2,
    "item": "mouse",
    "price": 60
},
{
    "_id": 8,
    "user_id": 3,
    "item": "laptop",
    "price": 11
}